#!usr/bin/env python

import rospy
import std_msgs.msg
import geometry_msgs.msg

from sensor_msgs.msg import LaserScan
from visualization_msgs.msg import Marker

import csv
from math import sin,cos,atan2,pi,sqrt
import matplotlib.pyplot as plt

from ellipse2d import Ellipse2d

#subscribe to laserscan
class Tracker:
    def __init__(self)
	#declare base_room here so it only has to be called once
	base = open("base_room.txt")
	reader = csv.reader(base)
	base_room = [float(line) for line in reader]
	base.close()

    def tracker():
    	rospy.init_node("tracker", anonymous=True)
    	#listen to scan topic
	pub=rospy.Publisher("ellipse_fit", Marker, queue_size=10)
    	rospy.Subscriber("scan", LaserScan, fit_ellipse, pub)
    	#spin until node is closed
    	rospy.spin()

    #turn laser range into xy, remove walls
    def fit_ellipse(data, publisher):
    	ellipse_xy = []
    	#points = [] #array to hold all points - FOR DEBUGGING
    	offset = 0.05 #distance for being considered part of wall, in meters. Make variable later.
    	angle = data.angle_min
    	incr = data.angle_increment
    	ranges = data.ranges
    	#polar >> cartesian
    	for r in ranges:
	    coordinate = ([cos(angle)*r, sin(angle)*r]) #make xy
	    #if dots aren't part of walls add them to the list
	    if all(abs(coordinate[0]-b[0]) > offset or abs(coordinate[1]-b[1]) > offset for b in base_room):
		ellipse_xy.append(coordinate)
	    angle+=incr
	    #points.append(coordinate) # - FOR DEBUGGING
	#fit ellipse to  points
	e2 = Ellipse2d()
    	e2.fit(ellipse_xy)
	#Publish ellipse data as Marker message
	h = std_msgs.msg.Header()
	h.frame_id = "/laser" #tie marker visualization to laser it comes from
	h.stamp = rospy.Time.now() # Note you need to call rospy.init_node() before this will work
	marker_pose=geometry_msgs.msg.Pose(Point(e2.center[0], e2.center[1]), Quaternion(0,0,1,e2.theta)) #set pose of marker
	marker_scale=geometry_msgs.msg.Vector3(e2.b, e2.a, 1.5) #scale, in meters: e2.a is shoulder-to-shoulder and e2.b is front to back
	color=std_msgs.msg.ColorRGBA(1, 0, 0, 1) #marker is set to be opaque red
	#publish marker:person_marker, modify a red cylinder, last indefinitely, frame_locked
	mark=visualization_msgs.msg.Marker(h, person_marker, 0, CYLINDER, MODIFY, marker_pose, marker_scale, color, 0, True)
	pub.publish(mark)
	#DEBUGGER: display ellipse relative to wall data
    	#print e2.a, e2.b, e2.theta, e2.center
    	#e2.plot()
    	#x = points[:, 0]
    	#y = points[:, 1]
    	#plt.scatter(x,y)
    	#plt.draw()

if __name__ == '__main__':
    t = Tracker()
    try:
        t.tracker()
    except rospy.ROSInterruptException:
        pass
